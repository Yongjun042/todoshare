{"version":3,"sources":["reportWebVitals.ts","components/AddTodo/index.tsx","components/TodoList/index.tsx","utils/index.tsx","components/CHeader/index.tsx","App.tsx","ThemeSetting.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CREATED_PREDICATE","cal","created","TODO_CLASS","Vtodo","TYPE_PREDICATE","rdf","type","AddTodo","todoList","setTodoList","session","useSession","useState","todoText","setTodoText","addTodo","text","a","indexUrl","getSourceUrl","todoWithText","addStringNoLocale","createThing","todoWithDate","addDatetime","Date","todoWithType","addUrl","updatedTodoList","setThing","saveSolidDatasetAt","fetch","updatedDataset","handleSubmit","event","preventDefault","className","onSubmit","TextInput","id","label","value","onChange","e","target","rightSection","Button","rightSectionWidth","TEXT_PREDICATE","COMPLETED_PREDICATE","completed","CompletedBody","checked","handleCheck","thing","useThing","Checkbox","style","textAlign","display","justifyContent","width","DeleteButton","deleteTodo","variant","margin","onClick","TodoList","todoThings","getThingAll","sort","b","getDatetime","todo","todosUrl","date","undoneTodo","removeDatetime","updatedTodos","doneTodo","updatedList","removeThing","thingsArray","filter","t","getUrl","map","dataset","length","things","property","header","sortable","dataType","body","Text","toDateString","Boolean","getOrCreateTodoList","containerUri","getSolidDataset","statusCode","createSolidDataset","CHeader","oidcIssuer","setOidcIssuer","Header","height","padding","info","isLoggedIn","webId","datasetUrl","thingUrl","properties","name","list","redirectUrl","window","location","href","authOptions","clientName","STORAGE_PREDICATE","space","storage","App","useEffect","profileDataset","profileThing","getThing","podsUrls","getUrlAll","pod","AppShell","ThemeSetting","preferredColorScheme","useColorScheme","colorScheme","setColorScheme","ColorSchemeProvider","toggleColorScheme","MantineProvider","theme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab112b68.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// components/AddTodo/index.jsx\r\n\r\nimport {\r\n  addDatetime,\r\n  addStringNoLocale,\r\n  createThing,\r\n  getSourceUrl,\r\n  saveSolidDatasetAt,\r\n  setThing,\r\n  addUrl,\r\n  SolidDataset ,\r\n  WithServerResourceInfo,\r\n} from \"@inrupt/solid-client\";\r\nimport{cal, rdf}from 'rdf-namespaces';\r\nimport { useSession } from \"@inrupt/solid-ui-react\";\r\nimport React, { useState } from \"react\";\r\nimport { TextInput, Button } from \"@mantine/core\";\r\nimport \"./index.scss\";\r\n\r\nconst TEXT_PREDICATE = \"http://schema.org/text\";\r\nconst CREATED_PREDICATE = cal.created;\r\nconst TODO_CLASS = cal.Vtodo;\r\nconst TYPE_PREDICATE = rdf.type;\r\n\r\ninterface todoListProps{\r\n  todoList: SolidDataset & WithServerResourceInfo;\r\n  setTodoList: React.Dispatch<React.SetStateAction<SolidDataset & WithServerResourceInfo>>;\r\n}\r\n\r\nfunction AddTodo( {todoList, setTodoList}: todoListProps) {\r\n  const { session } = useSession();\r\n  const [todoText, setTodoText] = useState(\"\");\r\n\r\n  const addTodo = async (text:string) => {\r\n    const indexUrl = getSourceUrl(todoList);\r\n    const todoWithText = addStringNoLocale(createThing(), TEXT_PREDICATE, text);\r\n    const todoWithDate = addDatetime(\r\n      todoWithText,\r\n      CREATED_PREDICATE,\r\n      new Date()\r\n    );\r\n    const todoWithType = addUrl(todoWithDate, TYPE_PREDICATE, TODO_CLASS);\r\n    const updatedTodoList = setThing(todoList, todoWithType);\r\n    const updatedDataset = await saveSolidDatasetAt(indexUrl, updatedTodoList, {\r\n      fetch: session.fetch,\r\n    });\r\n    setTodoList(updatedDataset);\r\n  };\r\n\r\n  const handleSubmit =  async (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    addTodo(todoText);\r\n    setTodoText(\"\");\r\n  };\r\n\r\n  const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n\r\n    setTodoText(e.target.value);\r\n  };\r\n\r\n  return (\r\n      <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n          <TextInput\r\n            id=\"todo-input\"\r\n            type=\"text\"\r\n            label=\"Todo is...\"\r\n            value={todoText}\r\n            onChange={handleChange}\r\n            rightSection={<Button className=\"add-button\" type=\"submit\">Add Todo</Button>}\r\n            rightSectionWidth={100}\r\n          />\r\n        \r\n      </form>\r\n  );\r\n}\r\n\r\nexport default AddTodo;","import {\r\n  addDatetime,\r\n  getDatetime,\r\n  getSourceUrl,\r\n  getThingAll,\r\n  getUrl,\r\n  removeDatetime,\r\n  removeThing,\r\n  saveSolidDatasetAt,\r\n  setThing,\r\n  SolidDataset,\r\n  WithServerResourceInfo,\r\n  Thing,\r\n} from \"@inrupt/solid-client\";\r\nimport {\r\n  Table,\r\n  TableColumn,\r\n  useThing,\r\n  useSession,\r\n} from \"@inrupt/solid-ui-react\";\r\nimport { cal, rdf } from \"rdf-namespaces\";\r\nimport React from \"react\";\r\nimport \"./index.scss\";\r\nimport { Text, Checkbox, Button } from \"@mantine/core\";\r\n\r\nconst TEXT_PREDICATE = \"http://schema.org/text\";\r\nconst CREATED_PREDICATE = cal.created;\r\nconst COMPLETED_PREDICATE = cal.completed;\r\nconst TODO_CLASS = cal.Vtodo;\r\nconst TYPE_PREDICATE = rdf.type;\r\n\r\ninterface todoListProps {\r\n  todoList: SolidDataset & WithServerResourceInfo;\r\n  setTodoList: React.Dispatch<\r\n    React.SetStateAction<SolidDataset & WithServerResourceInfo>\r\n  >;\r\n}\r\n\r\ninterface dateBind {\r\n  value: Date;\r\n}\r\n\r\nfunction CompletedBody({\r\n  checked,\r\n  handleCheck,\r\n}: {\r\n  checked: boolean;\r\n  handleCheck: (thing: Thing, checked: boolean) => void;\r\n}) {\r\n  const { thing } = useThing();\r\n  return (\r\n    <Checkbox\r\n      checked={checked}\r\n      style={{ textAlign: \"center\", display: \"flex\", justifyContent: \"center\", width: \"auto\" }}\r\n      onChange={() => handleCheck(thing as Thing, checked)}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DeleteButton({ deleteTodo }: { deleteTodo: (todo: Thing) => void }) {\r\n  const { thing } = useThing();\r\n  return (\r\n    <Button\r\n      className=\"delete-button\"\r\n      variant=\"outline\"\r\n      style={{ margin: \"4px\" }}\r\n      onClick={() => deleteTodo(thing as Thing)}\r\n    >\r\n      Delete\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction TodoList({ todoList, setTodoList }: todoListProps) {\r\n  const todoThings = todoList ? getThingAll(todoList) : [];\r\n  todoThings.sort((a: Thing, b: Thing): number => {\r\n    if (\r\n      (getDatetime(a, COMPLETED_PREDICATE) !== null) && (getDatetime(b, COMPLETED_PREDICATE) === null))\r\n     {\r\n      return 1;\r\n    }\r\n    if (\r\n      (getDatetime(a, COMPLETED_PREDICATE) === null) && (getDatetime(b, COMPLETED_PREDICATE)  !== null))\r\n     {\r\n      return -1;\r\n    }\r\n    if (\r\n      getDatetime(a, CREATED_PREDICATE)! > getDatetime(b, CREATED_PREDICATE)!\r\n    ) {\r\n      return -1;\r\n    }\r\n    if (\r\n      getDatetime(a, CREATED_PREDICATE)! < getDatetime(b, CREATED_PREDICATE)!\r\n    ) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  });\r\n\r\n  const { fetch } = useSession();\r\n\r\n  const handleCheck = async (todo: Thing, checked: boolean) => {\r\n    const todosUrl = getSourceUrl(todoList);\r\n    let updatedTodos;\r\n    if (!checked) {\r\n      const date = new Date();\r\n      const doneTodo = addDatetime(todo, COMPLETED_PREDICATE, date);\r\n      updatedTodos = setThing(todoList, doneTodo);\r\n    } else {\r\n      const date = getDatetime(todo, COMPLETED_PREDICATE);\r\n      const undoneTodo = removeDatetime(todo, COMPLETED_PREDICATE, date!);\r\n      updatedTodos = setThing(todoList, undoneTodo);\r\n    }\r\n    const updatedList = await saveSolidDatasetAt(todosUrl, updatedTodos, {\r\n      fetch,\r\n    });\r\n    setTodoList(updatedList);\r\n  };\r\n\r\n  const deleteTodo = async (todo: Thing) => {\r\n    const todosUrl = getSourceUrl(todoList);\r\n    const updatedTodos = removeThing(todoList, todo);\r\n    const updatedDataset = await saveSolidDatasetAt(todosUrl, updatedTodos, {\r\n      fetch,\r\n    });\r\n    setTodoList(updatedDataset);\r\n  };\r\n\r\n  const thingsArray = todoThings\r\n    .filter((t) => getUrl(t, TYPE_PREDICATE) === TODO_CLASS)\r\n    .map((t) => {\r\n      return { dataset: todoList, thing: t };\r\n    });\r\n  if (!thingsArray.length) return null;\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <span className=\"tasks-message\">\r\n        Your to-do list has {thingsArray.length} items\r\n      </span>\r\n      <Table className=\"table\" things={thingsArray}>\r\n        <TableColumn property={TEXT_PREDICATE} header=\"To Do\" sortable />\r\n        <TableColumn\r\n          property={CREATED_PREDICATE}\r\n          dataType=\"datetime\"\r\n          header=\"Created At\"\r\n          body={({ value }: dateBind) => <Text>{value.toDateString()}</Text>}\r\n          sortable\r\n        />\r\n        <TableColumn\r\n          property={COMPLETED_PREDICATE}\r\n          dataType=\"datetime\"\r\n          header=\"Done\"\r\n          body={({ value }: dateBind) => (\r\n            <CompletedBody checked={Boolean(value)} handleCheck={handleCheck} />\r\n          )}\r\n        />\r\n        <TableColumn\r\n          property={TEXT_PREDICATE}\r\n          header=\"\"\r\n          body={() => <DeleteButton deleteTodo={deleteTodo} />}\r\n        />\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import {\r\n  createSolidDataset,\r\n  getSolidDataset,\r\n  saveSolidDatasetAt,\r\n   \r\n} from \"@inrupt/solid-client\";\r\n\r\n \r\n\r\nexport async function getOrCreateTodoList(containerUri:string|URL, fetch:any) {\r\n  const indexUrl = `${containerUri}index.ttl`;\r\n  try {\r\n    const todoList = await getSolidDataset(indexUrl, { fetch });\r\n    return todoList;\r\n  } catch (error: any) {\r\n    if (error.statusCode === 404) {\r\n      const todoList = await saveSolidDatasetAt(\r\n        indexUrl,\r\n        createSolidDataset(),\r\n        {\r\n          fetch,\r\n        }\r\n      );\r\n      return todoList;\r\n    }\r\n  }\r\n}","import {\r\n    useSession,\r\n    LoginButton,\r\n    LogoutButton,\r\n    CombinedDataProvider,\r\n    Text,} from \"@inrupt/solid-ui-react\"\r\n\r\nimport React, {useState,}from \"react\";\r\n\r\nimport{ Header , TextInput, Button,} from \"@mantine/core\";\r\n\r\nimport \"./index.scss\";\r\n\r\n\r\nfunction CHeader() {\r\n    const { session } = useSession();\r\n\r\n    const authOptions = {\r\n        clientName: \"Solid Todo App\",\r\n      };\r\n    \r\n  const [oidcIssuer, setOidcIssuer] = useState(\"https://inrupt.net\");\r\n\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setOidcIssuer(event.target.value);\r\n  };\r\n  return (\r\n    <Header height={60} padding=\"xs\">\r\n      {session.info.isLoggedIn && session.info.webId ? (\r\n        <CombinedDataProvider\r\n          datasetUrl={session.info.webId}\r\n          thingUrl={session.info.webId}\r\n        >\r\n          <div className=\"logged-in\" style={{display:\"inline-blockz\"}}>\r\n            <span>Hello </span>\r\n            <Text\r\n              properties={[\r\n                \"http://www.w3.org/2006/vcard/ns#fn\",\r\n                \"http://xmlns.com/foaf/0.1/name\",\r\n              ]}\r\n            />\r\n            <LogoutButton>\r\n            <Button variant=\"light\" >\r\n              Log out\r\n            </Button>\r\n                </LogoutButton>\r\n          </div>\r\n        </CombinedDataProvider>\r\n      ) : (\r\n        <div className=\"message\" style={{ display: \"table\" }}>\r\n          <span style={{ display: \"table-cell\" }}>\r\n            IDP:\r\n            <TextInput\r\n              className=\"oidc-issuer-input \"\r\n              type=\"text\"\r\n              name=\"oidcIssuer\"\r\n              list=\"providers\"\r\n              value={oidcIssuer}\r\n              onChange={handleChange}\r\n              style={{ width: \"200px\", display: \"inline-block\" }}\r\n            />\r\n          </span>\r\n          <datalist id=\"providers\">\r\n            <option value=\"https://broker.pod.inrupt.com/\" />\r\n            <option value=\"https://inrupt.net/\" />\r\n          </datalist>\r\n          <LoginButton\r\n            oidcIssuer={oidcIssuer}\r\n            redirectUrl={window.location.href}\r\n            authOptions={authOptions}\r\n          >\r\n            <Button variant=\"filled\" style={{ display: \"inline-block\" }}>\r\n              Log in\r\n            </Button>\r\n          </LoginButton>\r\n        </div>\r\n      )}\r\n    </Header>\r\n  );\r\n}\r\n\r\nexport default CHeader;\r\n","// App.js\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  useSession,\n  CombinedDataProvider,\n} from \"@inrupt/solid-ui-react\";\nimport {\n  getSolidDataset,\n  getUrlAll,\n  getThing,\n  SolidDataset,\n  WithServerResourceInfo,\n} from \"@inrupt/solid-client\";\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\nimport { getOrCreateTodoList } from \"./utils\";\nimport { space } from \"rdf-namespaces\";\nimport { AppShell,} from \"@mantine/core\";\nimport CHeader from \"./components/CHeader\";\nimport \"./App.scss\";\n\nconst STORAGE_PREDICATE = space.storage;\n\n\n\nfunction App() {\n  const { session } = useSession();\n  const [todoList, setTodoList] = useState<\n    SolidDataset & WithServerResourceInfo\n  >();\n\n\n  useEffect(() => {\n    if (!session || !session.info.isLoggedIn) return;\n    (async () => {\n      const profileDataset = await getSolidDataset(session.info.webId!, {\n        fetch: session.fetch,\n      });\n      const profileThing = getThing(profileDataset, session.info.webId!);\n      const podsUrls = getUrlAll(profileThing!, STORAGE_PREDICATE);\n      const pod = podsUrls[0];\n      const containerUri = `${pod}todos/`;\n      const list = await getOrCreateTodoList(containerUri, session.fetch);\n      setTodoList(list);\n    })();\n  }, [session, session.info.isLoggedIn]);\n\n  return (\n    <AppShell\n      padding=\"md\"\n      header={\n        <CHeader/>\n      }\n    >\n      {session.info.isLoggedIn && session.info.webId ? (\n        <CombinedDataProvider\n          datasetUrl={session.info.webId}\n          thingUrl={session.info.webId}\n        >\n          <section className=\"main-content\">\n            <AddTodo\n              todoList={todoList as SolidDataset & WithServerResourceInfo}\n              setTodoList={\n                setTodoList as React.Dispatch<\n                  React.SetStateAction<SolidDataset & WithServerResourceInfo>\n                >\n              }\n            />\n            <TodoList\n              todoList={todoList as SolidDataset & WithServerResourceInfo}\n              setTodoList={\n                setTodoList as React.Dispatch<\n                  React.SetStateAction<SolidDataset & WithServerResourceInfo>\n                >\n              }\n            />\n          </section>\n        </CombinedDataProvider>\n      ) : <div>You are not logged in</div>}\n    </AppShell>\n  );\n}\n\nexport default App;\n\n/*\n            <span>Your nickname: </span>\n            <Text\n              properties={[\n                \"http://www.w3.org/2006/vcard/ns#fn\",\n                \"http://xmlns.com/foaf/0.1/name\",\n              ]}\n            />\n            <div className=\"message logged-in\">\n              <span>You are logged in as: </span>\n              <Text\n                properties={[\n                  \"http://xmlns.com/foaf/0.1/name\",\n                  \"http://www.w3.org/2006/vcard/ns#fn\",\n                ]}\n              />\n              */\n","import { MantineProvider, ColorSchemeProvider, ColorScheme } from '@mantine/core';\r\nimport { useColorScheme } from '@mantine/hooks';\r\nimport App from './App';\r\nimport {useState} from 'react';\r\n\r\nexport default function ThemeSetting() {\r\n  // hook will return either 'dark' or 'light' on client\r\n  // and always 'light' during ssr as window.matchMedia is not available\r\n  const preferredColorScheme = useColorScheme();\r\n  const [colorScheme, setColorScheme] = useState(preferredColorScheme);\r\n  const toggleColorScheme = (value?: ColorScheme) =>\r\n    setColorScheme(value || (colorScheme === 'dark' ? 'light' : 'dark'));\r\n\r\n  return (\r\n    <ColorSchemeProvider colorScheme={colorScheme} toggleColorScheme={toggleColorScheme}>\r\n      <MantineProvider theme={{ colorScheme }}>\r\n        <App />\r\n      </MantineProvider>\r\n    </ColorSchemeProvider>\r\n  );\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport ThemeSetting from './ThemeSetting';\nimport {SessionProvider} from '@inrupt/solid-ui-react';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <SessionProvider>\n      <ThemeSetting />\n    </SessionProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}